---
import "../styles/markdown.css";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import TableOfContents from "../components/TableOfContents.astro";
import Tag from "../components/Tag.astro";
import BlogBase from "./BlogBase.astro";
import { simpleCalcReadingTime } from "../utils";

interface Props {
	post: CollectionEntry<"blog">;
}

const { post } = Astro.props;
const {
	data: { title, tags, description, pubDate, updatedDate },
	body,
} = post;

const { headings } = await post.render();


---

<style>
	hr {
		border-top: 1px solid #ddd;
		margin: 1rem 0;
	}

	.tags {
		display: flex;
	}

	.tags :global(a) {
		margin-right: 8px;
	}

	.last-updated-on {
		font-style: italic;
	}
</style>
<BlogBase title={title} description={description}>
	<div class="tags">
		{tags.map((tag) => <Tag tag={tag} />)}
	</div>
	<h1 class="text-title text-2rem my-5 fw-800" id={title}>{title}</h1>
	<span class="block min-w-10rem text-tertiary">
		<FormattedDate date={pubDate} />
		Â· <span>{simpleCalcReadingTime(body)}</span>
	</span>
	{
		updatedDate && (
			<div class="last-updated-on">
				Last updated on <FormattedDate date={updatedDate} />
			</div>
		)
	}
	<hr />
	<div class="flex items-start">
		{
			!!headings.length && (
				<aside class="hidden lg:block doc-aside sticky top-20 shrink-0 pl-8 -mr-50 order-2">
					<TableOfContents title={title} headings={headings} />
				</aside>
			)
		}
		<article class="flex-grow prose">
			<slot />
		</article>
	</div>
</BlogBase>
